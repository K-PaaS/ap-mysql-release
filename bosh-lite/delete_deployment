#!/bin/bash

set -eux

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# This script expects to live one directory below the release directory.
RELEASE_DIR=$( cd ${MY_DIR}/.. && pwd )
# And that the release directory lives one directory below the workspace directory.
WORKSPACE_DIR="$( cd ${RELEASE_DIR}/.. && pwd )"

OK_COLOR='\033[1;32m'
ACTION_COLOR='\033[1;33m'
INFO_COLOR='\033[1;36m'
NO_COLOR='\033[0m'

DEPLOYMENT_NAME=${DEPLOYMENT_NAME:-cf-warden-mysql}
DIRECTOR_IP=${DIRECTOR_IP:-192.168.50.4}

# If a file exists with an api-address, use that instead
if [ -f ${WORKSPACE_DIR}/api-address ]; then
  API_ADDRESS=$( cat ${WORKSPACE_DIR}/api-address )
  echo -e "WARNING: Found API address file at ${INFO_COLOR}${WORKSPACE_DIR}/api-address${NO_COLOR} - using ${INFO_COLOR}${API_ADDRESS}${NO_COLOR} instead of ${INFO_COLOR}${DIRECTOR_IP}${NO_COLOR}"
  DIRECTOR_IP=${API_ADDRESS}
fi

export BOSH_USER=admin
export BOSH_PASSWORD=admin

bosh -n target ${DIRECTOR_IP}

DEPLOYMENTS_OUTPUT=$( bosh deployments )

set +e
echo ${DEPLOYMENTS_OUTPUT} | grep ${DEPLOYMENT_NAME}
DEPLOYMENT_GREP_RESULT=$?
set -e

# A value of 0 indicates grep matched successfully,
# and hence the deployment exists and we should delete it.
if [ ${DEPLOYMENT_GREP_RESULT} -eq 0 ]; then
  bosh -n delete deployment ${DEPLOYMENT_NAME} --force
else
  echo "deployment ${DEPLOYMENT_NAME} not found - nothing to delete"
fi
